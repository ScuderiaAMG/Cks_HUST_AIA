/*****************************************logs.c***********************************************/
#include "logs.h"
#include "public.h"
#include "home.h"
#include "main.h"
#include "draw.h"
#include <dos.h>
#include <conio.h>
#include <dir.h>
#include <fcntl.h>

int logs_page(int language)
{
    FILE* filelog = NULL;
    FILE* fplogs = NULL;
    static int state = SELECT_USER;                 // 褰撳墠鐣岄潰鐘舵€?
    static char currentUser[13] = { 0 };            // 褰撳墠閫変腑鐢ㄦ埛
    static char currentCategory[13] = { 0 };        // 褰撳墠閫変腑绫诲埆
    static char currentFile[13] = { 0 };            // 褰撳墠閫変腑鏂囦欢

    int drawuserlist = 0;                    // 鏄?鍚︾粯鍒剁敤鎴峰垪琛?
    int drawcategorylist = 0;                // 鏄?鍚︾粯鍒剁被鍒?鍒楄〃
    int drawfilelist = 0;                    // 鏄?鍚︾粯鍒舵枃浠跺垪琛?
    int drawcontent = 0;                     // 鏄?鍚︾粯鍒舵枃浠跺唴瀹?

    int new_state = 0;
    int showHomeButton = 0;
    struct ffblk ffblk;
    char path[128];
    int done;
    int returnflag = 0;
    int selected;
    int userCount = 0;
    int fileCount = 0;
    char users[MAX_ITEMS][13] = { 0 };
    char files[MAX_ITEMS][13] = { 0 };

    int record[21][26] = { 0 };                // 鍐滅敯璁板綍鏁扮粍
    char* nowfield;                            // 褰撳墠鍐滅敯鍚嶇О

	int logsflag = 0;                            // 鐢ㄤ簬璁板綍绫诲埆閫夋嫨
	//int paintfieldinlog = 0;                     // 鐢ㄤ簬缁樺埗鍐滅敯鐣岄潰


    const char* categories[] = { "DRONE", "FIELD", "PESTICIDE" };

    delay(50);
	//memset(record, 0, sizeof(record)); // 鍐滅敯璁板綍鏁扮粍鍒╨?€
    clrmous(MouseX, MouseY);
    cleardevice();      // 纭?淇濇竻灞忕敓鏁?
    setbkcolor(WHITE);  // 鏄惧紡璁剧疆鑳屾櫙鑹?
    mouseinit();


    // 涓诲惊鐜?
    while (1)
    {
        newmouse(&MouseX, &MouseY, &press);

        if (showHomeButton) {
            go_to_home(&state);
            if (state == SELECT_USER) {
                // 閲嶇疆鎵€鏈夐潤鎬佸彉閲忓拰鐣岄潰鐘舵€?
                currentUser[0] = '\0';
                currentCategory[0] = '\0';
                currentFile[0] = '\0';
                drawuserlist = 0;
                drawcategorylist = 0;
                drawfilelist = 0;
                drawcontent = 0;
                showHomeButton = 0; // 闅愯棌杩斿洖涓婚〉鎸夐挳
                return HOME;
            }
        }
        switch (state)
        {
            case SELECT_USER:
        {
            // 鎵?鎻忕洰褰曡幏鍙栫敤鎴峰垪琛?
            done = findfirst("C:\\DATA\\*.*", &ffblk, FA_DIREC);

            userCount = 0; // 閲嶇疆鐢ㄦ埛璁℃暟

            delay(50);
            while (!done && userCount < MAX_ITEMS)
            {
                if ((ffblk.ff_attrib & FA_DIREC) && strcmp(ffblk.ff_name, ".") && strcmp(ffblk.ff_name, ".."))
                {
                    strcpy(users[userCount++], ffblk.ff_name);
                }
                done = findnext(&ffblk);
            }

            // 缁樺埗鐢ㄦ埛鍒楄〃骞惰幏鍙栭€夋嫨
            selected = draw_user_list(users, userCount, language, drawuserlist);
            if (drawuserlist == 0)
            {
                drawuserlist = 1;
            }


            if (selected != -1)
            {
                strncpy(currentUser, users[selected], sizeof(currentUser) - 1);
                currentUser[sizeof(currentUser) - 1] = '\0'; // 纭?淇濈粓姝㈢??
                delay(50);
                state = SELECT_CATEGORY;
            }
            break;
        }

            case SELECT_CATEGORY:
        {

            // 缁樺埗鍥哄畾涓変釜绫诲埆
            selected = draw_category_list(language, drawcategorylist, state);

            logsflag = selected;

            if (drawcategorylist == 0)
            {

                drawcategorylist = 1;
            }

            if (selected != -1)
            {
                strcpy(currentCategory, categories[selected]);
                delay(50);
                state = SELECT_FILE;
            }
            break;
        }

            case SELECT_FILE:
        {

            // 鏋勫缓璺?寰勶細C:\DATA\鐢ㄦ埛\绫诲埆\*.dat
            sprintf(path, "C:\\DATA\\%s\\%s\\*.dat", currentUser, currentCategory);

            done = findfirst(path, &ffblk, 0);

            if (drawfilelist == 0)
            {
                while (!done && fileCount < MAX_ITEMS)
                {
                    strcpy(files[fileCount++], ffblk.ff_name);
                    done = findnext(&ffblk);
                }
            }

            

            // 缁樺埗鏂囦欢鍒楄〃
            selected = draw_file_list(files, fileCount, language, drawfilelist);
            if (drawfilelist == 0)
            {

                drawfilelist = 1;
            }

            if (selected != -1)
            {
                strcpy(currentFile, files[selected]);
                delay(50);
                state = SHOW_CONTENT;
            }

            break;
        }

        
            case SHOW_CONTENT:
        {

            // 鏋勫缓瀹屾暣鏂囦欢璺?寰?
            sprintf(path, "C:\\DATA\\%s\\%s\\%s", currentUser, currentCategory, currentFile);

            nowfield = currentFile;              // 褰撳墠鍐滅敯鍚嶇О
            if (drawcontent == 0)
            {
                if (logsflag == 1) // 濡傛灉鏄?鍐滅敯
                {
                    paint_field_in_log(record, nowfield, language, drawcontent, currentUser);   // 缁樺埗鍐滅敯鐣岄潰
                }
                else
                {
                    show_file_content(path, language, drawcontent);
                }
                drawcontent = 1;
            }
            //if(logsflag == 1) // 濡傛灉鏄?鍐滅敯
            //{
            //    paint_field(record, nowfield, language);   // 缁樺埗鍐滅敯鐣岄潰
            //}
            //else
            //{
            //    show_file_content(path, language, drawcontent);
            //}
            //paint_field(record, nowfield, language);   // 缁樺埗鍐滅敯鐣岄潰

            //show_file_content(path, language, drawcontent);

            if(drawcontent == 0)
            {
                drawcontent = 1;
			}
            showHomeButton = 1;

            delay(50);
            break;
        }
        }

    }
}

int draw_user_list(const char users[][13], int count, int language, int drawuserlist)
{

    int i, y;


    if (drawuserlist == 0)
    {
        cleardevice();
        clrmous(MouseX, MouseY);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        put_flower(400, 240, 15, BLUE);
		put_flower(460, 300, 5, GREEN);
        if (language == ENGLISH)
        {
            setcolor(BLUE);
            outtextxy(50, 30, "Select User:");
        }
        else if (language == CHINESE)
        {
            puthz(50, 30, "选择用户", 32, 32, BLUE);
        }

        // 缁樺埗鐢ㄦ埛鍒楄〃

        for (i = 0; i < count; i++)
        {
            y = 80 + i * 40;
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 4, 5);
            outtextxy(60, y + 8, users[i]);
        }
        drawuserlist++;

    }



    // 妫€娴嬬偣鍑?
    for (i = 0; i < count; i++)
    {
        y = 80 + i * 40;
        if (MouseX > 50 && MouseX < 50 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 2)
        {
            setcolor(CYAN);
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, YELLOW, 1, 4, 5);
            outtextxy(60, y + 8, users[i]);
        }

        if (mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 0)
        {
            setcolor(BLUE);
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 4, 5);
            outtextxy(60, y + 8, users[i]);
        }
        
        if (MouseX > 50 && MouseX < 50 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 1)
        {
            return i;
        }
    }
    return -1;

    
}

int draw_category_list(int language, int drawcategorylist, int homeflag)
{
    const char* categories[] = { "DRONE", "FIELD", "PESTICIDE" };
    int i, y;

    if (drawcategorylist == 0)
    {
        cleardevice();
        clrmous(MouseX, MouseY);
        setfillstyle(SOLID_FILL, WHITE);
        bar(50, 70, 330, 480);
        put_flower(150, 280, 20, RED);
		put_flower(200, 340, 10, CYAN);
        if (language == ENGLISH)
        {
            settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
            setcolor(BLUE);
            outtextxy(50, 30, "Select Category:");
        }
        else if (language == CHINESE)
        {
            puthz(50, 30, "选择类别", 32, 32, BLUE);
        }

        for (i = 0; i < 3; i++)
        {
            y = 80 + i * 40;
            printbox(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 5, 4);
            outtextxy(360, y + 8, categories[i]);
        }
        drawcategorylist++;
    }


    // 妫€娴嬬偣鍑?
    for (i = 0; i < 3; i++)
    {
        y = 80 + i * 40;

        if (MouseX > 350 && MouseX < 350 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT) == 2)
        {
            setcolor(CYAN);
            printbox(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT, YELLOW, 1, 4, 5);
            settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
            outtextxy(360, y + 8, categories[i]);
        }
        if (mouse_press(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT) == 0)
        {
            setcolor(BLUE);
            printbox(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 4, 5);
            outtextxy(360, y + 8, categories[i]);
        }
        if (MouseX > 350 && MouseX < 350 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(350, y, 350 + BTN_WIDTH, y + BTN_HEIGHT) == 1)
        {
            return i;
        }
    }
    return -1;
}

int draw_file_list(const char files[][13], int count, int language, int drawfilelist)
{
    int i, y = 0;
    static int tag=0;
    if (drawfilelist == 0)
    {
        clrmous(MouseX, MouseY);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        cleardevice();
		put_flower(450, 290, 25, BLUE);
		put_flower(490, 360, 5, RED);
        // 缁樺埗鏍囬??
        if (language == ENGLISH)
        {
            setcolor(BLUE);
            outtextxy(50, 30, "Select File:");
        }
        else if (language == CHINESE)
        {
            puthz(50, 30, "选择文件", 32, 32, BLUE);
        }
        // 缁樺埗鏂囦欢鍒楄〃

        for (i = 0; i < count; i++)
        {
            y = 80 + i * 40;
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 5, 4);
            outtextxy(60, y + 8, files[i]);
        }
        drawfilelist++;
    }
    // 妫€娴嬬偣鍑?
    for (i = 0; i < count; i++)
    {
        y = 80 + i * 40;
        if (MouseX > 50 && MouseX < 50 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 2)
        {
            setcolor(CYAN);
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, YELLOW, 1, 4, 5);
            outtextxy(60, y + 8, files[i]);
        }
        
        if (MouseX > 50 && MouseX < 50 + BTN_WIDTH && MouseY > y && MouseY < y + BTN_HEIGHT && mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 1)
        {
           
            return i;
        }

        if (mouse_press(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT) == 0)
        {
            setcolor(BLUE);
            printbox(50, y, 50 + BTN_WIDTH, y + BTN_HEIGHT, DARKGRAY, 1, 4, 5);
            outtextxy(60, y + 8, files[i]);
        }
    }
    return -1;
}

void show_file_content(const char* path, int language, int drawcontent)
{
    FILE* fp = fopen(path, "rb");
    char buffer[16];
    int y = 70;

    if (drawcontent == 0)
    {
        clrmous(MouseX, MouseY);
        cleardevice();
        //settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 3);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        printbox(595, 5, 630, 40, DARKGRAY, 1, 5, 4);
        setcolor(DARKGRAY);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        outtextxy(602, 10, "x");
        if (language == ENGLISH)
        {
            setcolor(BLUE);
            outtextxy(50, 50, "Existing:");
        }
        else if(language== CHINESE)
        {
            puthz(50, 50, "已存在的", 32, 32, BLUE);
		}

      
        if (!fp)
        {

            if (language == ENGLISH)
            {
                setcolor(BLUE);
                outtextxy(50, 80, "Empty file!");
                outtextxy(50, 110, "Not Found!");
            }
            else if (language == CHINESE)
            {
                puthz(50, 80, "打开文件为空", 32, 32, BLUE);
                puthz(50, 110, "未找到", 32, 32, BLUE);
            }
            //return;
            drawcontent++;
        }
        settextstyle(SANS_SERIF_FONT, HORIZ_DIR, 3);
        // 璇诲彇,鏄剧ず鍐呭??
        while (fgets(buffer, sizeof(buffer), fp))
        {
            setcolor(BLUE);
            outtextxy(80, y + 30, buffer);
            y += 30;
            if (y > 300)
                break; // 瓒呭嚭灞忓箷灏卞仠姝?
        }
    }
    drawcontent++;
    
    fclose(fp);
}

void trans(int num, char* str)
{
    int temp = num;
    int digits = 0; //浣嶆暟
    int index = 0;
    while (temp != 0)
    {
        temp /= 10;
        digits++;
    }
    index = digits - 1;
    temp = num;
    do
    {
        str[index--] = temp % 10 + '0';
        temp /= 10;
    } while (temp != 0);
    //鏈€鍚庡姞0
    str[digits] = '\0';
    //缁?0涔熻緭鍑哄瓧绗︿覆
    if (num == 0)
    {
        str[0] = '0';
        str[1] = '\0';
    }
}
int go_to_home(int* state) 
{
    static int button_state = 0; // 0: 姝ｅ父, 1: 鎮?鍋?, 2: 鎸変笅
    int new_button_state = button_state;

    // 妫€娴嬮紶鏍囨槸鍚﹀湪鎸夐挳涓?
    if (MouseX >= 595 && MouseX <= 630 && MouseY >= 5 && MouseY <= 40) {
        if (press == 1) 
        { // 榧犳爣鎸変笅
            new_button_state = 2;
            *state = SELECT_USER;
        }
        else
        { // 榧犳爣鎮?鍋?
            new_button_state = 1;
        }
    }
    else {
        new_button_state = 0;
    }

    // 濡傛灉鎸夐挳鐘舵€佸彂鐢熷彉鍖栵紝鍒欓噸缁樻寜閽?
    if (new_button_state != button_state) {
        button_state = new_button_state;
        draw_home_button(button_state);
    }

    return button_state;
}

void draw_home_button(int state) 
{
    //cleardevice();
    switch (state) 
    {
    case 0: // 姝ｅ父鐘舵€?
        printbox(595, 5, 630, 40, DARKGRAY, 1, 5, 4);
        setcolor(DARKGRAY);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        outtextxy(602, 10, "x");
        break;
    case 1: // 鎮?鍋滅姸鎬?
        printbox(595, 5, 630, 40, BLUE, 1, 5, 4);
        setcolor(BLUE);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        outtextxy(602, 10, "x");
        break;
    case 2: // 鎸変笅鐘舵€?
        printbox(595, 5, 630, 40, DARKGRAY, 1, 5, 4);
        setcolor(DARKGRAY);
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 3);
        outtextxy(602, 10, "x");
        break;
    }
}

// 缁樺埗涓€鏈靛儚绱犻?庢牸鐨勮姳鏈碉紙涓?蹇? + 鑺辩摚 + 鑼庯級
void put_flower(int x, int y, int pix, int COLOR)
{
    // 涓诲共
    printline(x, y - pix * 9, 1, 9, 1, COLOR, pix, 0);

    // 妯?鍚戣姳鐡ｏ紙涓?闂翠袱灞傦級
    printline(x - 2 * pix, y - pix * 6, 1, 5, 0, COLOR, pix, 0);
    printline(x - 2 * pix, y - pix * 5, 1, 5, 0, COLOR, pix, 0);

    // 宸︿笂涓庡彸涓婅姳鐡?
    printline(x - 2 * pix, y - pix * 10, 1, 4, 1, COLOR, pix, 0);
    printline(x - 3 * pix, y - pix * 9, 1, 3, 1, COLOR, pix, 0);
    printline(x + 2 * pix, y - pix * 10, 1, 4, 1, COLOR, pix, 0);
    printline(x + 3 * pix, y - pix * 9, 1, 3, 1, COLOR, pix, 0);

    // 涓?闂村姞娣?
    printline(x, y - pix * 8, 1, 3, 0, COLOR, pix, 0);

    // 宸﹀彸涓嬫柟鑺辩摚
    printline(x - 4 * pix, y - pix * 4, 1, 2, 1, COLOR, pix, 0);
    printline(x - 3 * pix, y - pix * 3, 1, 2, 1, COLOR, pix, 0);
    printline(x + 4 * pix, y - pix * 4, 1, 2, 1, COLOR, pix, 0);
    printline(x + 3 * pix, y - pix * 3, 1, 2, 1, COLOR, pix, 0);

    // 涓嬪眰妯?鍚戣姳鐡?
    printline(x - 2 * pix, y - pix * 2, 1, 5, 0, COLOR, pix, 0);
    printline(x - 2 * pix, y - pix * 1, 1, 5, 0, COLOR, pix, 0);

    // 宸︿笅鍨傜洿绾胯ˉ鑺辫姱
    printline(x - pix, y - pix * 7, 1, 3, 1, COLOR, pix, 0);
}

void paint_field_in_log(int record[21][26], char* nowfield, int language, int paintfieldinlog, char* users)
{
    int i, j, x, y;
    char path[100]; 
    FILE* fp;       
    char string[80] = "c:\\DATA\\";
    char* username = users;
   
	memset(record, 0, sizeof(record)); 
    
    
    if (username == NULL) 
    {
		cleardevice();
        setbkcolor(BLACK);
        printf("无法获取用户名。\n");
        delay(1000);
        return;
    }
    clrmous(MouseX, MouseY); 
    if (strlen(nowfield) != 0)
    {
        strcat(string, username);
        strcat(string, "\\");
        strcat(string, "FIELD\\");
        strcat(string, nowfield);
        //strcat(string, ".dat");
        if ((fp = fopen(string, "rb")) != NULL)
        {

            for (i = 0; i < 21; i++)
            {
                fread(record[i], sizeof(int), 26, fp);
            }
        }
        else
        {
            cleardevice();
            
            setbkcolor(BLACK);
			printf("无法打开文件: %s\n", path);   
            delay(1000);
        }
        fclose(fp);
        
    }
    
    delay(50);
    setbkcolor(WHITE); // 璀滃磾鍢樺皻寮艰憥鏄撳技
    cleardevice();     // 璩犺寘璀滃Д

    

    back_button(PAINT); // 绱欏礄鍗︽寚姊撴偿
    setcolor(DARKGRAY);  // 璀滃磾鍐插技钁庡湩瀛愬技
    
    if (language == ENGLISH)
    {
        settextstyle(DEFAULT_FONT, HORIZ_DIR, 4); // 璀滃磾鐚熶簯鍔斿?€
        outtextxy(110, 10, "NAME:"); // 瑁滅珒鐚熶簯 NAME:
    }
    else if (language == CHINESE)
    {
        puthz(110, 8, "名称", 32, 32, DARKGRAY); // 瑁滅珒鏌诲繓 鍏嗗悇
    }
    outtextxy(260, 10, nowfield); // 瑁滅珒杓濆康婊村讥鍏嗗悇

    setlinestyle(SOLID_LINE, 0, THICK_WIDTH); // 璀滃磾銥嶄緩钁庣碁銥?
    setcolor(DARKGRAY); // 璀滃磾鍐插技钁庡湩瀛愬技
    line(110, 50, 110, 470); // 绱欏礄鎻涘卜銥?
    line(110, 470, 630, 470); // 绱欏礄閭﹀碃銥?
    line(110, 50, 108, 60); // 绱欏礄鐪夊彅渚樻仯璨у彅
    line(110, 50, 112, 60);
    line(630, 470, 620, 468); // 绱欏礄鐪夊彅渚樺様鍜屽彅
    line(630, 470, 620, 472);

    setlinestyle(DOTTED_LINE, 0, NORM_WIDTH); // 璀滃磾銥嶄緩钁庡€°瀺
    setcolor(DARKGRAY); // 璀滃磾鍐插技钁庡湩瀛愬技
    for (i = 0; i < 26; i++) // 绱欏礄鎻涘卜鍊°瀺
    {
        line(110 + i * 20, 50, 110 + i * 20, 470);
    }
    for (i = 0; i < 21; i++) // 绱欏礄閭﹀碃鍊°瀺
    {
        line(110, 470 - i * 20, 630, 470 - i * 20);
    }

    // 绱欏礄婊村讥鍧?鍚?
    for (i = 0; i < 21; i++)//y
    {
        for (j = 0; j < 26; j++)//x
        {
            x = 110 + j * 20;
            y = 470 - i * 20 - 20;
            if (record[i][j] != 2 && record[i][j] != 0)
            {
                setfillstyle(SOLID_FILL, DARKGRAY);
                bar(110 + j * 20, 470 - (i + 1) * 20, 110 + (j + 1) * 20, 470 - i * 20);
            }
            if (record[i][j] == 2)
            {
                setfillstyle(SOLID_FILL, LIGHTBLUE);
                bar(110 + j * 20, 470 - (i + 1) * 20, 110 + (j + 1) * 20, 470 - i * 20);
            }
            if (record[i][j] == 3)
            {
                put_house(x, y, BROWN, CYAN, 2);
            }
            else if (record[i][j] == 4)
            {
                put_house(x, y, BROWN, MAGENTA, 2);
            }
            else if (record[i][j] == 5)
            {
                put_house(x, y, BROWN, YELLOW, 2);
            }
            else if (record[i][j] == 6)
            {
                put_house(x, y, BROWN, BLUE, 2);
            }
            else if (record[i][j] >= 10 && record[i][j] <= 39) {
                put_crop1(x, y, SPROUT, HEALTHY);
            }
            else if (record[i][j] >= 40 && record[i][j] <= 69) {
                put_crop2(x, y, SPROUT, HEALTHY);
            }
            else if (record[i][j] >= 70 && record[i][j] <= 99) {
                put_crop3(x, y, SPROUT, HEALTHY);
            }
        }
    }

    paintfieldinlog++;
}
/******************************************logs.h******************************************/
#ifndef _LOGS_H_
#define _LOGS_H_

#define MAX_ITEMS 20
#define BTN_WIDTH 250
#define BTN_HEIGHT 40
#define MAX_FILES 20  // 定义文件数量上限

// 界面绘制与处理函数
int logs_page(int language);
int draw_user_list(const char users[][13], int count, int language, int drawuserlist);
int draw_category_list(int language, int drawcategorylist, int homeflag);
int draw_file_list(const char files[][13], int count, int language, int drawfilelist);
void show_file_content(const char* path, int language, int scuderia);
void trans(int num, char* str);
int go_to_home(int* state);
void draw_home_button(int state);
void put_flower(int x, int y, int pix, int COLOR);
void paint_field_in_log(int record[21][26], char* nowfield, int language, int paintfieldinlog, char* users);
/* 用户数据结构 */
struct UserData
{
    char logsname[9];
    char drone_files[MAX_FILES][13];
    char field_files[MAX_FILES][13];
    char pesticide_files[MAX_FILES][13];
    int drone_count;
    int field_count;
    int pesticide_count;
};

#endif 
